import{a as p,t as b}from"../chunks/disclose-version.6CFbjw_q.js";import{a4 as f,g as i,a7 as u,a8 as t,a9 as y,f as o,aa as z}from"../chunks/runtime.CihvSwKW.js";import{d as w}from"../chunks/events.Bnxny7e1.js";import{i as k}from"../chunks/lifecycle.CRlq5SRC.js";import{g as l}from"../chunks/entry.BPm3l85y.js";var T=b(`<div class="software svelte-1gbygzs"><h1 class="svelte-1gbygzs">Open-source contributions</h1> <div class="software-item svelte-1gbygzs"><a href="https://github.com/mh105/somata" class="svelte-1gbygzs"><h2 class="svelte-1gbygzs">SOMATA: State-space oscillator modeling and time series analysis</h2></a> <div class="description svelte-1gbygzs">State-space Oscillator Modeling And Time-series Analysis (SOMATA) is a Python library for state-space neural signal
processing algorithms developed in the Purdon Lab.</div> <h3 class="svelte-1gbygzs">Authors: Mingjian He, Proloy Das, Ran Liu, Amanda Beck, Patrick Purdon</h3></div> <h1 class="svelte-1gbygzs">Toy projects</h1> <div class="software-item clickable svelte-1gbygzs"><h2 class="svelte-1gbygzs">Push/Fold Heads Up Texas Hold'em Solver</h2> <div class="description svelte-1gbygzs">A Nash equilibrium solver for the 2-player Push/Fold (all-in or fold preflop) subgame of Texas Hold'em, written in Rust
and compiled to WebAssembly. The game is solved via <a href="https://arxiv.org/abs/1407.5042" class="svelte-1gbygzs">CFR+</a>, a counterfactual
regret minimization algorithm variant with good empirical performance. Precomputed tables of equities and matchup
probabilities allow fast solutions even on mobile devices.</div></div> <div class="software-item clickable svelte-1gbygzs"><h2 class="svelte-1gbygzs">Sudoku Solver</h2> <div class="description svelte-1gbygzs">A Sudoku solver, written in Rust and compiled to WebAssembly. Empty cells with only one possible solution are filled in
first, before resorting to depth-first search and backtracking, starting with the cell with the fewest possible
candidates.</div></div> <div class="software-item clickable svelte-1gbygzs"><h2 class="svelte-1gbygzs">Tic-Tac-Toe Solver</h2> <div class="description svelte-1gbygzs">A Tic-Tac-Toe solver. The game is solved via tabular minimax, with reflection and rotation-invariant hashes computed in
order to reduce the number of game states to 765.</div></div></div>`);function A(n,d){f(d,!1),k();var a=T(),r=t(y(a),6),g=o(()=>l("/software/pushfold"));r.__click=function(...e){var s;(s=i(g))==null||s.apply(this,e)};var c=t(r,2),v=o(()=>l("/software/sudoku"));c.__click=function(...e){var s;(s=i(v))==null||s.apply(this,e)};var h=t(c,2),m=o(()=>l("/software/tictactoe"));h.__click=function(...e){var s;(s=i(m))==null||s.apply(this,e)},z(a),p(n,a),u()}w(["click"]);export{A as component};
