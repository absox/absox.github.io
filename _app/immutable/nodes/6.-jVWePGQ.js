import{a as h,t as m}from"../chunks/disclose-version.CyaTdpPh.js";import{a4 as b,l as i,a7 as p,a8 as o,a9 as y,o as l,aa as f}from"../chunks/runtime.BsiJ2hp_.js";import{d as u}from"../chunks/events.Bje-08iu.js";import{i as z}from"../chunks/lifecycle.Cv1rEYxr.js";import{g as r}from"../chunks/entry.ORjNO9oT.js";var k=m(`<div class="software svelte-1gbygzs"><h1 class="svelte-1gbygzs">Open-source contributions</h1> <div class="software-item svelte-1gbygzs"><a href="https://github.com/mh105/somata" class="svelte-1gbygzs"><h2 class="svelte-1gbygzs">SOMATA: State-space oscillator modeling and time series analysis</h2></a> <div class="description svelte-1gbygzs">State-space Oscillator Modeling And Time-series Analysis (SOMATA) is a Python library for state-space neural signal
processing algorithms developed in the Purdon Lab.</div> <h3 class="svelte-1gbygzs">Authors: Mingjian He, Proloy Das, Ran Liu, Amanda Beck, Patrick Purdon</h3></div> <h1 class="svelte-1gbygzs">Toy projects</h1> <div class="software-item clickable svelte-1gbygzs"><h2 class="svelte-1gbygzs">Sudoku Solver</h2> <div class="description svelte-1gbygzs">A Sudoku solver, written in Rust and compiled to WebAssembly. Empty cells with only one possible solution are filled in
first, before resorting to depth-first search and backtracking, starting with the cell with the fewest possible
candidates.</div></div> <div class="software-item clickable svelte-1gbygzs"><h2 class="svelte-1gbygzs">Tic-Tac-Toe Solver</h2> <div class="description svelte-1gbygzs">A Tic-Tac-Toe solver. The game is solved via tabular minimax, with reflection and rotation-invariant hashes computed in
order to reduce the number of game states to 765.</div></div></div>`);function w(c,n){b(n,!1),z();var e=k(),t=o(y(e),6),d=l(()=>r("/software/sudoku"));t.__click=function(...a){var s;(s=i(d))==null||s.apply(this,a)};var g=o(t,2),v=l(()=>r("/software/tictactoe"));g.__click=function(...a){var s;(s=i(v))==null||s.apply(this,a)},f(e),h(c,e),p()}u(["click"]);export{w as component};
