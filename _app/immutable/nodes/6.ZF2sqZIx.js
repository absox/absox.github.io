import{a as c,t as d}from"../chunks/disclose-version.6CFbjw_q.js";import{a4 as n,a7 as v,a8 as s,a9 as m,aa as h}from"../chunks/runtime.CihvSwKW.js";import{d as p}from"../chunks/events.Bnxny7e1.js";import{i as w}from"../chunks/lifecycle.CRlq5SRC.js";import{g as a}from"../chunks/entry.lHQeeDp4.js";var u=()=>a("/software/pushfold"),f=()=>a("/software/sudoku"),b=()=>a("/software/tictactoe"),g=d(`<div class="software svelte-2a72iw"><h1 class="svelte-2a72iw">Open-source contributions</h1> <div class="software-item svelte-2a72iw"><a href="https://github.com/mh105/somata" class="svelte-2a72iw"><h2 class="svelte-2a72iw">SOMATA: State-space oscillator modeling and time series analysis</h2></a> <div class="description svelte-2a72iw">State-space Oscillator Modeling And Time-series Analysis (SOMATA) is a Python library for state-space neural
            signal processing algorithms developed in the Purdon Lab.</div> <h3 class="svelte-2a72iw">Authors: Mingjian He, Proloy Das, Ran Liu, Amanda Beck, Patrick Purdon</h3></div> <h1 class="svelte-2a72iw">Toy projects</h1> <div class="software-item clickable svelte-2a72iw"><h2 class="svelte-2a72iw">Push/Fold Heads Up Texas Hold'em Solver</h2> <div class="description svelte-2a72iw">A Nash equilibrium solver for the 2-player Push/Fold (all-in or fold preflop) subgame of Texas Hold'em,
            written in Rust and compiled to WebAssembly. The game is solved via <a href="https://arxiv.org/abs/1407.5042" class="svelte-2a72iw">CFR+</a>, a counterfactual regret minimization algorithm variant with good empirical performance. Precomputed
            tables of equities and matchup probabilities allow fast solutions even on mobile devices.</div></div> <div class="software-item clickable svelte-2a72iw"><h2 class="svelte-2a72iw">Sudoku Solver</h2> <div class="description svelte-2a72iw">A Sudoku solver, written in Rust and compiled to WebAssembly. Empty cells with only one possible solution
            are filled in first, before resorting to depth-first search and backtracking, starting with the cell with
            the fewest possible candidates.</div></div> <div class="software-item clickable svelte-2a72iw"><h2 class="svelte-2a72iw">Tic-Tac-Toe Solver</h2> <div class="description svelte-2a72iw">A Tic-Tac-Toe solver. The game is solved via tabular minimax, with reflection and rotation-invariant hashes
            computed in order to reduce the number of game states to 765.</div></div></div>`);function k(o,l){n(l,!1),w();var e=g(),i=s(m(e),6);i.__click=[u];var t=s(i,2);t.__click=[f];var r=s(t,2);r.__click=[b],h(e),c(o,e),v()}p(["click"]);export{k as component};
